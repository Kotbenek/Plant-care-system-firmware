
Plant_care_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000408  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  00800062  00800062  0000049e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c3  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000216  00000000  00000000  00000581  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000106  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000307  00000000  00000000  0000089d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000140  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	else DISPLAY_CLEAR;

}

int main()
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	//Port directions setup
	DDRB = 0b00000011;
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b01111111;
  a2:	8f e7       	ldi	r24, 0x7F	; 127
  a4:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	81 bb       	out	0x11, r24	; 17

	//Buttons pull-up
	PORTA = 0b00011111;
  aa:	8f e1       	ldi	r24, 0x1F	; 31
  ac:	8b bb       	out	0x1b, r24	; 27

	//Timer0 prescaler 64
	TCCR0 |= (1<<CS01) | (1<<CS00);
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	83 bf       	out	0x33, r24	; 51

	//Timer0 overflow interrupt enable
	TIMSK |= (1<<TOIE0); 
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	89 bf       	out	0x39, r24	; 57

	//Enable interrupts
	sei();
  ba:	78 94       	sei

	//Set Vref to AVcc
	ADMUX |= (1 << REFS0);
  bc:	3e 9a       	sbi	0x07, 6	; 7

	//Set ADC input to 1.22V bandgap
    ADMUX |= (1 << MUX4) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1);
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	8e 61       	ori	r24, 0x1E	; 30
  c2:	87 b9       	out	0x07, r24	; 7

	//Set ADC prescaler to 32
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0);
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	85 60       	ori	r24, 0x05	; 5
  c8:	86 b9       	out	0x06, r24	; 6
	
	//ADC free running mode
	ADCSRA |= (1 << ADATE);
  ca:	35 9a       	sbi	0x06, 5	; 6

	//Enable ADC
	ADCSRA |= (1 << ADEN);
  cc:	37 9a       	sbi	0x06, 7	; 6

	//Start ADC free running conversion
	ADCSRA |= (1 << ADSC);
  ce:	36 9a       	sbi	0x06, 6	; 6
  d0:	f0 90 6a 00 	lds	r15, 0x006A
  d4:	e0 90 6b 00 	lds	r14, 0x006B

	while(1)
	{
		//Check if ADC conversion complete
	    if (ADCSRA & (1 << ADIF))
  d8:	34 9b       	sbis	0x06, 4	; 6
  da:	68 c0       	rjmp	.+208    	; 0x1ac <main+0x11a>
		{
			//Clear flag
			ADCSRA |= (1 << ADIF);			
  dc:	34 9a       	sbi	0x06, 4	; 6

			//Get ADC result, calculate Vcc sample and store it in array
			Vcc_values[Vcc_values_index++] = 1220L * 1023 / ((uint16_t)ADCL + ((uint16_t)(ADCH) << 8));
  de:	94 b1       	in	r25, 0x04	; 4
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	0f 2d       	mov	r16, r15
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	00 0f       	add	r16, r16
  e8:	11 1f       	adc	r17, r17
  ea:	02 59       	subi	r16, 0x92	; 146
  ec:	1f 4f       	sbci	r17, 0xFF	; 255
  ee:	d8 2f       	mov	r29, r24
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	9e 01       	movw	r18, r28
  f4:	29 0f       	add	r18, r25
  f6:	31 1d       	adc	r19, r1
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	6c e3       	ldi	r22, 0x3C	; 60
  fe:	7b e0       	ldi	r23, 0x0B	; 11
 100:	83 e1       	ldi	r24, 0x13	; 19
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 c5 01 	call	0x38a	; 0x38a <__divmodsi4>
 108:	f8 01       	movw	r30, r16
 10a:	31 83       	std	Z+1, r19	; 0x01
 10c:	20 83       	st	Z, r18
 10e:	f3 94       	inc	r15

			//If the end of array is reached
			if (Vcc_values_index == VCC_VALUES_SAMPLES)
 110:	f0 e4       	ldi	r31, 0x40	; 64
 112:	ff 16       	cp	r15, r31
 114:	19 f4       	brne	.+6      	; 0x11c <main+0x8a>
 116:	ff 24       	eor	r15, r15
 118:	ee 24       	eor	r14, r14
 11a:	e3 94       	inc	r14
 11c:	ee e6       	ldi	r30, 0x6E	; 110
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	50 e0       	ldi	r21, 0x00	; 0

			//Calculate Vcc by averaging the samples
			Vcc_value = 0;
			for (uint8_t i = 0; i < VCC_VALUES_SAMPLES; i++)
			{
				Vcc_value += Vcc_values[i];
 128:	81 91       	ld	r24, Z+
 12a:	91 91       	ld	r25, Z+
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	28 0f       	add	r18, r24
 132:	39 1f       	adc	r19, r25
 134:	4a 1f       	adc	r20, r26
 136:	5b 1f       	adc	r21, r27
				Vcc_value_valid = 1;
			}

			//Calculate Vcc by averaging the samples
			Vcc_value = 0;
			for (uint8_t i = 0; i < VCC_VALUES_SAMPLES; i++)
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	ee 3e       	cpi	r30, 0xEE	; 238
 13c:	f8 07       	cpc	r31, r24
 13e:	a1 f7       	brne	.-24     	; 0x128 <main+0x96>
			{
				Vcc_value += Vcc_values[i];
			}
			Vcc_value /= VCC_VALUES_SAMPLES;
 140:	89 01       	movw	r16, r18
 142:	9a 01       	movw	r18, r20
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	36 95       	lsr	r19
 148:	27 95       	ror	r18
 14a:	17 95       	ror	r17
 14c:	07 95       	ror	r16
 14e:	8a 95       	dec	r24
 150:	d1 f7       	brne	.-12     	; 0x146 <main+0xb4>

			//Debug - display Vcc
			if (Vcc_value_valid) display_number((uint16_t)Vcc_value);			
 152:	ee 20       	and	r14, r14
 154:	59 f1       	breq	.+86     	; 0x1ac <main+0x11a>

//7-segment display functions

inline void display_number(uint16_t value)
{
	display_1 = value / 1000 % 10;
 156:	c8 01       	movw	r24, r16
 158:	68 ee       	ldi	r22, 0xE8	; 232
 15a:	73 e0       	ldi	r23, 0x03	; 3
 15c:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 160:	cb 01       	movw	r24, r22
 162:	6a e0       	ldi	r22, 0x0A	; 10
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 16a:	80 93 62 00 	sts	0x0062, r24
	display_2 = value / 100 % 10;
 16e:	c8 01       	movw	r24, r16
 170:	64 e6       	ldi	r22, 0x64	; 100
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 178:	cb 01       	movw	r24, r22
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 182:	80 93 63 00 	sts	0x0063, r24
	display_3 = value / 10 % 10;
 186:	c8 01       	movw	r24, r16
 188:	6a e0       	ldi	r22, 0x0A	; 10
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 190:	cb 01       	movw	r24, r22
 192:	6a e0       	ldi	r22, 0x0A	; 10
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 19a:	80 93 64 00 	sts	0x0064, r24
	display_4 = value % 10;
 19e:	c8 01       	movw	r24, r16
 1a0:	6a e0       	ldi	r22, 0x0A	; 10
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 1a8:	80 93 65 00 	sts	0x0065, r24
			//Debug - display Vcc
			if (Vcc_value_valid) display_number((uint16_t)Vcc_value);			
	    }

		//Menu button
		if (!(PINA & (1<<PA4)))
 1ac:	89 b3       	in	r24, 0x19	; 25
		{
			
		}
		//M+ button
		if (!(PINA & (1<<PA2)))
 1ae:	89 b3       	in	r24, 0x19	; 25
		{
			
		}
		//M- button
		if (!(PINA & (1<<PA3)))
 1b0:	89 b3       	in	r24, 0x19	; 25
		{
			
		}
		//H+ button
		if (!(PINA & (1<<PA0)))
 1b2:	89 b3       	in	r24, 0x19	; 25
		{
			
		}
		//H- button
		if (!(PINA & (1<<PA1)))
 1b4:	89 b3       	in	r24, 0x19	; 25
 1b6:	90 cf       	rjmp	.-224    	; 0xd8 <main+0x46>

000001b8 <__vector_11>:
	}
}

//250Hz interrupt
ISR(TIMER0_OVF_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
	//7-segment display
	DISPLAY_DIGIT_NONE;
 1c8:	85 b3       	in	r24, 0x15	; 21
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	85 bb       	out	0x15, r24	; 21
	display_4 = value % 10;
}

inline uint8_t display_digit()
{
	if (display_n == 1) return display_1;
 1ce:	80 91 60 00 	lds	r24, 0x0060
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	19 f4       	brne	.+6      	; 0x1dc <__vector_11+0x24>
 1d6:	80 91 62 00 	lds	r24, 0x0062
 1da:	14 c0       	rjmp	.+40     	; 0x204 <__vector_11+0x4c>
	if (display_n == 2) return display_2;
 1dc:	80 91 60 00 	lds	r24, 0x0060
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	19 f4       	brne	.+6      	; 0x1ea <__vector_11+0x32>
 1e4:	80 91 63 00 	lds	r24, 0x0063
 1e8:	0d c0       	rjmp	.+26     	; 0x204 <__vector_11+0x4c>
	if (display_n == 3) return display_3;
 1ea:	80 91 60 00 	lds	r24, 0x0060
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <__vector_11+0x40>
 1f2:	80 91 64 00 	lds	r24, 0x0064
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <__vector_11+0x4c>
	if (display_n == 4) return display_4;
 1f8:	80 91 60 00 	lds	r24, 0x0060
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	51 f5       	brne	.+84     	; 0x254 <__vector_11+0x9c>
 200:	80 91 65 00 	lds	r24, 0x0065

}

inline void display(uint8_t digit)
{
	if (digit == 0) DISPLAY_0;
 204:	88 23       	and	r24, r24
 206:	11 f4       	brne	.+4      	; 0x20c <__vector_11+0x54>
 208:	84 e1       	ldi	r24, 0x14	; 20
 20a:	25 c0       	rjmp	.+74     	; 0x256 <__vector_11+0x9e>
	else if (digit == 1) DISPLAY_1;
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	11 f4       	brne	.+4      	; 0x214 <__vector_11+0x5c>
 210:	87 e7       	ldi	r24, 0x77	; 119
 212:	21 c0       	rjmp	.+66     	; 0x256 <__vector_11+0x9e>
	else if (digit == 2) DISPLAY_2;
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	11 f4       	brne	.+4      	; 0x21c <__vector_11+0x64>
 218:	8c e4       	ldi	r24, 0x4C	; 76
 21a:	1d c0       	rjmp	.+58     	; 0x256 <__vector_11+0x9e>
	else if (digit == 3) DISPLAY_3;
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	11 f4       	brne	.+4      	; 0x224 <__vector_11+0x6c>
 220:	85 e4       	ldi	r24, 0x45	; 69
 222:	19 c0       	rjmp	.+50     	; 0x256 <__vector_11+0x9e>
	else if (digit == 4) DISPLAY_4;
 224:	84 30       	cpi	r24, 0x04	; 4
 226:	11 f4       	brne	.+4      	; 0x22c <__vector_11+0x74>
 228:	87 e2       	ldi	r24, 0x27	; 39
 22a:	15 c0       	rjmp	.+42     	; 0x256 <__vector_11+0x9e>
	else if (digit == 5) DISPLAY_5;
 22c:	85 30       	cpi	r24, 0x05	; 5
 22e:	11 f4       	brne	.+4      	; 0x234 <__vector_11+0x7c>
 230:	85 e8       	ldi	r24, 0x85	; 133
 232:	11 c0       	rjmp	.+34     	; 0x256 <__vector_11+0x9e>
	else if (digit == 6) DISPLAY_6;
 234:	86 30       	cpi	r24, 0x06	; 6
 236:	11 f4       	brne	.+4      	; 0x23c <__vector_11+0x84>
 238:	84 e8       	ldi	r24, 0x84	; 132
 23a:	0d c0       	rjmp	.+26     	; 0x256 <__vector_11+0x9e>
	else if (digit == 7) DISPLAY_7;
 23c:	87 30       	cpi	r24, 0x07	; 7
 23e:	11 f4       	brne	.+4      	; 0x244 <__vector_11+0x8c>
 240:	87 e5       	ldi	r24, 0x57	; 87
 242:	09 c0       	rjmp	.+18     	; 0x256 <__vector_11+0x9e>
	else if (digit == 8) DISPLAY_8;
 244:	88 30       	cpi	r24, 0x08	; 8
 246:	11 f4       	brne	.+4      	; 0x24c <__vector_11+0x94>
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	05 c0       	rjmp	.+10     	; 0x256 <__vector_11+0x9e>
	else if (digit == 9) DISPLAY_9;
 24c:	89 30       	cpi	r24, 0x09	; 9
 24e:	11 f4       	brne	.+4      	; 0x254 <__vector_11+0x9c>
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	01 c0       	rjmp	.+2      	; 0x256 <__vector_11+0x9e>
	else DISPLAY_CLEAR;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	82 bb       	out	0x12, r24	; 18
	//7-segment display
	DISPLAY_DIGIT_NONE;

	display(display_digit());

	if      (display_n == 1) DISPLAY_DIGIT1;
 258:	80 91 60 00 	lds	r24, 0x0060
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	11 f4       	brne	.+4      	; 0x264 <__vector_11+0xac>
 260:	ab 9a       	sbi	0x15, 3	; 21
 262:	11 c0       	rjmp	.+34     	; 0x286 <__vector_11+0xce>
	else if (display_n == 2) DISPLAY_DIGIT2;
 264:	80 91 60 00 	lds	r24, 0x0060
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	11 f4       	brne	.+4      	; 0x270 <__vector_11+0xb8>
 26c:	aa 9a       	sbi	0x15, 2	; 21
 26e:	0b c0       	rjmp	.+22     	; 0x286 <__vector_11+0xce>
	else if (display_n == 3) DISPLAY_DIGIT3;
 270:	80 91 60 00 	lds	r24, 0x0060
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	11 f4       	brne	.+4      	; 0x27c <__vector_11+0xc4>
 278:	a9 9a       	sbi	0x15, 1	; 21
 27a:	05 c0       	rjmp	.+10     	; 0x286 <__vector_11+0xce>
	else if (display_n == 4) DISPLAY_DIGIT4;
 27c:	80 91 60 00 	lds	r24, 0x0060
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	09 f4       	brne	.+2      	; 0x286 <__vector_11+0xce>
 284:	a8 9a       	sbi	0x15, 0	; 21

	display_n++;
 286:	80 91 60 00 	lds	r24, 0x0060
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 60 00 	sts	0x0060, r24
	if (display_n == 5) display_n = 1;
 290:	80 91 60 00 	lds	r24, 0x0060
 294:	85 30       	cpi	r24, 0x05	; 5
 296:	19 f4       	brne	.+6      	; 0x29e <__vector_11+0xe6>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 60 00 	sts	0x0060, r24

	//Debug - LED test
	counter += 4;
 29e:	80 91 6c 00 	lds	r24, 0x006C
 2a2:	90 91 6d 00 	lds	r25, 0x006D
 2a6:	04 96       	adiw	r24, 0x04	; 4
 2a8:	90 93 6d 00 	sts	0x006D, r25
 2ac:	80 93 6c 00 	sts	0x006C, r24
	if (counter == 8000) counter = 0;
 2b0:	80 91 6c 00 	lds	r24, 0x006C
 2b4:	90 91 6d 00 	lds	r25, 0x006D
 2b8:	80 54       	subi	r24, 0x40	; 64
 2ba:	9f 41       	sbci	r25, 0x1F	; 31
 2bc:	21 f4       	brne	.+8      	; 0x2c6 <__vector_11+0x10e>
 2be:	10 92 6d 00 	sts	0x006D, r1
 2c2:	10 92 6c 00 	sts	0x006C, r1

	if (counter < 1000)
 2c6:	80 91 6c 00 	lds	r24, 0x006C
 2ca:	90 91 6d 00 	lds	r25, 0x006D
 2ce:	88 5e       	subi	r24, 0xE8	; 232
 2d0:	93 40       	sbci	r25, 0x03	; 3
 2d2:	10 f4       	brcc	.+4      	; 0x2d8 <__vector_11+0x120>
	{
		LED2_OFF;
 2d4:	ac 98       	cbi	0x15, 4	; 21
 2d6:	23 c0       	rjmp	.+70     	; 0x31e <__vector_11+0x166>
		LED1_OFF;
		LED0_OFF;
	}
	else if (counter < 2000)
 2d8:	80 91 6c 00 	lds	r24, 0x006C
 2dc:	90 91 6d 00 	lds	r25, 0x006D
 2e0:	80 5d       	subi	r24, 0xD0	; 208
 2e2:	97 40       	sbci	r25, 0x07	; 7
 2e4:	10 f4       	brcc	.+4      	; 0x2ea <__vector_11+0x132>
	{
		LED2_OFF;
 2e6:	ac 98       	cbi	0x15, 4	; 21
 2e8:	24 c0       	rjmp	.+72     	; 0x332 <__vector_11+0x17a>
		LED1_OFF;
		LED0_ON;
	}
	else if (counter < 3000)
 2ea:	80 91 6c 00 	lds	r24, 0x006C
 2ee:	90 91 6d 00 	lds	r25, 0x006D
 2f2:	88 5b       	subi	r24, 0xB8	; 184
 2f4:	9b 40       	sbci	r25, 0x0B	; 11
 2f6:	10 f4       	brcc	.+4      	; 0x2fc <__vector_11+0x144>
	{
		LED2_OFF;
 2f8:	ac 98       	cbi	0x15, 4	; 21
 2fa:	25 c0       	rjmp	.+74     	; 0x346 <__vector_11+0x18e>
		LED1_ON;
		LED0_OFF;
	}
	else if (counter < 4000)
 2fc:	80 91 6c 00 	lds	r24, 0x006C
 300:	90 91 6d 00 	lds	r25, 0x006D
 304:	80 5a       	subi	r24, 0xA0	; 160
 306:	9f 40       	sbci	r25, 0x0F	; 15
 308:	10 f4       	brcc	.+4      	; 0x30e <__vector_11+0x156>
	{
		LED2_OFF;
 30a:	ac 98       	cbi	0x15, 4	; 21
 30c:	20 c0       	rjmp	.+64     	; 0x34e <__vector_11+0x196>
		LED1_ON;
		LED0_ON;
	}
	else if (counter < 5000)
 30e:	80 91 6c 00 	lds	r24, 0x006C
 312:	90 91 6d 00 	lds	r25, 0x006D
 316:	88 58       	subi	r24, 0x88	; 136
 318:	93 41       	sbci	r25, 0x13	; 19
 31a:	18 f4       	brcc	.+6      	; 0x322 <__vector_11+0x16a>
	{
		LED2_ON;
 31c:	ac 9a       	sbi	0x15, 4	; 21
		LED1_OFF;
 31e:	ad 98       	cbi	0x15, 5	; 21
 320:	13 c0       	rjmp	.+38     	; 0x348 <__vector_11+0x190>
		LED0_OFF;
	}
	else if (counter < 6000)
 322:	80 91 6c 00 	lds	r24, 0x006C
 326:	90 91 6d 00 	lds	r25, 0x006D
 32a:	80 57       	subi	r24, 0x70	; 112
 32c:	97 41       	sbci	r25, 0x17	; 23
 32e:	18 f4       	brcc	.+6      	; 0x336 <__vector_11+0x17e>
	{
		LED2_ON;
 330:	ac 9a       	sbi	0x15, 4	; 21
		LED1_OFF;
 332:	ad 98       	cbi	0x15, 5	; 21
 334:	0d c0       	rjmp	.+26     	; 0x350 <__vector_11+0x198>
		LED0_ON;
	}
	else if (counter < 7000)
 336:	80 91 6c 00 	lds	r24, 0x006C
 33a:	90 91 6d 00 	lds	r25, 0x006D
 33e:	88 55       	subi	r24, 0x58	; 88
 340:	9b 41       	sbci	r25, 0x1B	; 27
 342:	20 f4       	brcc	.+8      	; 0x34c <__vector_11+0x194>
	{
		LED2_ON;
 344:	ac 9a       	sbi	0x15, 4	; 21
		LED1_ON;
 346:	ad 9a       	sbi	0x15, 5	; 21
		LED0_OFF;
 348:	ae 98       	cbi	0x15, 6	; 21
 34a:	03 c0       	rjmp	.+6      	; 0x352 <__vector_11+0x19a>
	}
	else
	{
		LED2_ON;
 34c:	ac 9a       	sbi	0x15, 4	; 21
		LED1_ON;
 34e:	ad 9a       	sbi	0x15, 5	; 21
		LED0_ON;
 350:	ae 9a       	sbi	0x15, 6	; 21
	}
}
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__udivmodhi4>:
 362:	aa 1b       	sub	r26, r26
 364:	bb 1b       	sub	r27, r27
 366:	51 e1       	ldi	r21, 0x11	; 17
 368:	07 c0       	rjmp	.+14     	; 0x378 <__udivmodhi4_ep>

0000036a <__udivmodhi4_loop>:
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	a6 17       	cp	r26, r22
 370:	b7 07       	cpc	r27, r23
 372:	10 f0       	brcs	.+4      	; 0x378 <__udivmodhi4_ep>
 374:	a6 1b       	sub	r26, r22
 376:	b7 0b       	sbc	r27, r23

00000378 <__udivmodhi4_ep>:
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	5a 95       	dec	r21
 37e:	a9 f7       	brne	.-22     	; 0x36a <__udivmodhi4_loop>
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	bc 01       	movw	r22, r24
 386:	cd 01       	movw	r24, r26
 388:	08 95       	ret

0000038a <__divmodsi4>:
 38a:	97 fb       	bst	r25, 7
 38c:	09 2e       	mov	r0, r25
 38e:	05 26       	eor	r0, r21
 390:	0e d0       	rcall	.+28     	; 0x3ae <__divmodsi4_neg1>
 392:	57 fd       	sbrc	r21, 7
 394:	04 d0       	rcall	.+8      	; 0x39e <__divmodsi4_neg2>
 396:	14 d0       	rcall	.+40     	; 0x3c0 <__udivmodsi4>
 398:	0a d0       	rcall	.+20     	; 0x3ae <__divmodsi4_neg1>
 39a:	00 1c       	adc	r0, r0
 39c:	38 f4       	brcc	.+14     	; 0x3ac <__divmodsi4_exit>

0000039e <__divmodsi4_neg2>:
 39e:	50 95       	com	r21
 3a0:	40 95       	com	r20
 3a2:	30 95       	com	r19
 3a4:	21 95       	neg	r18
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
 3a8:	4f 4f       	sbci	r20, 0xFF	; 255
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255

000003ac <__divmodsi4_exit>:
 3ac:	08 95       	ret

000003ae <__divmodsi4_neg1>:
 3ae:	f6 f7       	brtc	.-4      	; 0x3ac <__divmodsi4_exit>
 3b0:	90 95       	com	r25
 3b2:	80 95       	com	r24
 3b4:	70 95       	com	r23
 3b6:	61 95       	neg	r22
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	8f 4f       	sbci	r24, 0xFF	; 255
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	08 95       	ret

000003c0 <__udivmodsi4>:
 3c0:	a1 e2       	ldi	r26, 0x21	; 33
 3c2:	1a 2e       	mov	r1, r26
 3c4:	aa 1b       	sub	r26, r26
 3c6:	bb 1b       	sub	r27, r27
 3c8:	fd 01       	movw	r30, r26
 3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <__udivmodsi4_ep>

000003cc <__udivmodsi4_loop>:
 3cc:	aa 1f       	adc	r26, r26
 3ce:	bb 1f       	adc	r27, r27
 3d0:	ee 1f       	adc	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	a2 17       	cp	r26, r18
 3d6:	b3 07       	cpc	r27, r19
 3d8:	e4 07       	cpc	r30, r20
 3da:	f5 07       	cpc	r31, r21
 3dc:	20 f0       	brcs	.+8      	; 0x3e6 <__udivmodsi4_ep>
 3de:	a2 1b       	sub	r26, r18
 3e0:	b3 0b       	sbc	r27, r19
 3e2:	e4 0b       	sbc	r30, r20
 3e4:	f5 0b       	sbc	r31, r21

000003e6 <__udivmodsi4_ep>:
 3e6:	66 1f       	adc	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	1a 94       	dec	r1
 3f0:	69 f7       	brne	.-38     	; 0x3cc <__udivmodsi4_loop>
 3f2:	60 95       	com	r22
 3f4:	70 95       	com	r23
 3f6:	80 95       	com	r24
 3f8:	90 95       	com	r25
 3fa:	9b 01       	movw	r18, r22
 3fc:	ac 01       	movw	r20, r24
 3fe:	bd 01       	movw	r22, r26
 400:	cf 01       	movw	r24, r30
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
